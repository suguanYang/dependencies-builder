// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
  moduleFormat = "esm"
  driver = "better-sqlite3"

  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum NodeType {
  NamedExport
  NamedImport
  RuntimeDynamicImport
  GlobalVarRead
  GlobalVarWrite
  WebStorageRead
  WebStorageWrite
  EventOn
  EventEmit
  DynamicModuleFederationReference
}

enum AppType {
  Lib
  App
}

model Project {
  id        String   @id @default(cuid())
  addr      String
  name      String   @unique
  type      AppType
  entries   Json?    // Store project entries path for projects that cannot find entries by static analysis
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relations
  nodes Node[] @relation("BelongsTo")

  // Indexes
  @@index([name])
}

model Node {
  id           String   @id @default(cuid())
  branch       String
  projectId    String 
  projectName  String 
  version      String
  type         NodeType
  name         String
  relativePath String
  startLine    Int
  startColumn  Int
  endLine      Int
  endColumn    Int
  meta         Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  // Relations
  fromConnections Connection[] @relation("FromNode")
  toConnections   Connection[] @relation("ToNode")
  project         Project      @relation("BelongsTo", fields: [projectId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([branch, projectName, type, name])
  @@index([projectName, branch])
  @@index([type, name])
}

model Connection {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  createdAt DateTime @default(now())

  // Relations
  fromNode Node @relation("FromNode", fields: [fromId], references: [id], onDelete: Cascade)
  toNode   Node @relation("ToNode", fields: [toId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([fromId])
  @@index([toId])
  @@unique([fromId, toId])
}

enum ActionType {
  static_analysis
  report
  connection_auto_create
}

enum ActionStatus {
  pending
  running
  completed
  failed
}

model Action {
  id        String      @id @default(cuid())
  status    ActionStatus
  type      ActionType
  parameters Json
  result    Json?
  error     String?
  logs      Json?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt

  // Indexes
  @@index([status])
  @@index([type])
  @@index([createdAt])
}